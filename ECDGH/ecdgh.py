# -*- coding: utf-8 -*-
"""ECDGH.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ecahggV1SGmZ3W8evOABmjdrDN6OLb6n
"""

import random


# caculates the values of P
def calculate_p(a, p, x1, y1, x2, y2):
  
  # here doubling will only be used only once for calculating 2p 
  # doubling
  if (x1 == x2 and y1 == y2):
    val_up = (3 * (x1 ** 2) + a) % p
    val_down = pow((2 * y1), -1, p)
    s = (val_up * val_down ) % p

    x3 = (s ** 2 - x1 - x2) % p
    y3 = (s*(x1 - x3) - y1) % p
    return (x3, y3)
    
  # for other cases like 3p it will be calculated as 2p + p 
  # again 4p will be calculates as 3p + p   
  # addition 
  else:
    val_up = (y2 - y1) % p
    val_down = pow((x2 - x1), -1, p)
    s = (val_up * val_down ) % p
    x3 = (s ** 2 - x1 - x2) % p
    y3 = (s*(x1 - x3) - y1) % p
    return (x3, y3) 

a = int(input ("Please enter the value of a = " ))
b = int(input ("Please enter the value of b = " ))
N = int(input ("Please enter the value of mod, N = "))
p_x = int(input ("Please enter the value of Primitive x co-ordinatw, Px = "))
p_y = int(input ("Please enter the value of Primitive y co-ordinatw, Py = "))

print ()
print ("===========================================")
print ("Given,")
print ("Elliptic Curve => y^2 = x^3 +", a, "x +", b, "mod", N)
print ("Primitive Element = (", p_x,",", p_y, ")")
print ("===========================================")
print ()

# Alice
private_key_of_Alice = int(input ("Alice's choosen secret value = " ))
for i in range (private_key_of_Alice - 1):
  if (i == 0):
    (f_a,g_a) = calculate_p(a, N, p_x, p_y, p_x, p_y) 
  else:
    (f_a,g_a) = calculate_p(a, N, f_a, g_a, p_x, p_y )

public_key_of_Alice = (f_a, g_a)

# Bob
private_key_of_Bob = int(input ("Bob's choosen secret value = " ))
for i in range (private_key_of_Bob - 1):
  if (i == 0):
    (f_b,g_b) = calculate_p(a, N, p_x, p_y, p_x, p_y)
  else:
    (f_b,g_b) = calculate_p(a, N, f_b, g_b, p_x, p_y )

public_key_of_Bob = (f_b, g_b)

# key sharing 
key_transfer_alice = public_key_of_Bob
key_transfer_bob = public_key_of_Alice

#alice calculating the shared key
x,y = key_transfer_alice
for i in range (private_key_of_Alice -1):
  if (i == 0):
    (f_a,g_a) = calculate_p(a, N, x,y, x,y)
  else:
    (f_a,g_a) = calculate_p(a, N, f_a, g_a, x,y )

shared_key_alice = (f_a, g_a)     

#bob calculating the shared key
x_b,y_b = key_transfer_bob
for i in range (private_key_of_Bob -1):
  if (i == 0):
    (f_b,g_b) = calculate_p(a, N, x_b, y_b, x_b, y_b)
  else:
    (f_b,g_b) = calculate_p(a, N, f_b, g_b, x_b,y_b )

shared_key_bob = (f_b, g_b)
print ()

print ("public key of Alice =", private_key_of_Alice,"p =", private_key_of_Alice,"(", p_x,",", p_y, ") =" , public_key_of_Alice)
print ("public key of Bob   =", private_key_of_Bob, "p =", private_key_of_Bob,"(", p_x,",", p_y, ") =" , public_key_of_Bob)
print ()

print ("Now Alice sharing her public key to Bob ->",public_key_of_Alice )
print ("Bob received Alice's public key         ->", key_transfer_bob, "-> Alice_p") 
print ("Now Bob sharing his public key to Alice ->",public_key_of_Bob )
print ("Alice received Bob's public key         ->", key_transfer_alice, "-> Bob_p")
print ()

print("Shared Key generated by Alice =", private_key_of_Alice,"  Bob_p =", private_key_of_Alice, key_transfer_alice, "=" , shared_key_alice)
print("Shared Key generated by Bob   =", private_key_of_Bob,"Alice_p =", private_key_of_Bob, key_transfer_bob, "=" , shared_key_bob)

print ()

# finally checking if their generate shared key matches
if (f_a == f_b):
  print ( "Generated pair matched !" )
  print ("===========================================")
  print( "Shared Key =",f_a)
else: 
  print ("not matched")