# -*- coding: utf-8 -*-
"""Lab 3 - Hasing & RSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JZSE9z5GVKZkffx0K_vC_5_5MKAVFMGH

# Hashing
"""

import hashlib

md5 = hashlib.md5(b'Cryptography')
sha256 = hashlib.sha256(b'Cryptography')
sha512 = hashlib.sha512(b'Cryptography')
sha1 = hashlib.sha1(b'Cryptography')
 
print(md5.hexdigest())
print(sha256.hexdigest())
print(sha512.hexdigest())
print(sha1.hexdigest())

"""# Create MD5 Hash of a file"""

print(hashlib.md5("passlist.txt".encode('UTF-8')).hexdigest())

file_name = '/content/passlist.txt'

with open(file_name) as f:
    data = f.read()
    md5hash = hashlib.md5(data.encode('UTF-8')).hexdigest()
print(md5hash)

"""# Task 1"""

class Admin:
  
  def __init__(self):
    self.username = 'admin'
    self.password = '8062dc84e0faa9e553192841432d4836208f700d43f3b68a53cc30ad4b7b3464'

  def login(self,username,password):
    if username == self.username and password == self.password:
      return "Login successful"
    else:
      return "Wrong password. Please try again"

user = Admin()
user.login("admin","8062dc84e0faa9e553192841432d4836208f700d43f3b68a53cc30ad4b7b3464")

"""Your task is to find the plaintext password using dictionary attack. 
Download password list: https://drive.google.com/file/d/1tqoWvRJu1h1uOfsxXiJ6G_ccY6DdsV_9/view?usp=share_link
"""

file_name='/content/passlist.txt'
with open(file_name) as file:
  data = file.read()
  i = data.split()
  for x in range(len(i)):
    sha256hash = hashlib.sha256(i[x].encode('UTF-8')).hexdigest()
    user = Admin()
    if(user.login("admin", sha256hash)== "Login successful"):
        print("password is: ",i[x], "which is in line ", x)

"""# RSA"""

import math
m = 119 
p = 29
q = 31
n = p * q #899
phi = (p-1) * (q-1) #840
e = 11

i = 1
while(True):
  g = e * i
  if g % 1 == 1:
    d=1
    break
  i = i+1




    

print(r)


print("d =",d)
c = m ** e % n
print("Encrypted message =",c)

c = 595
d = 611
n = 899

m = c ** d % n
print("Decrypted message =",m)

from sympy import nextprime
from sympy.ntheory.modular import crt
import numpy as np
N = [33, 35, 247]
c = [29, 13, 220]
x = crt(N, c)[0]
print(np.cbrt(x))